#!/usr/bin/perl

use strict;
use warnings;
use Getopt::Long;
use File::Basename;

my ($input_bed, $input_bam, $input_depth, $thresholds_str);
my $num_args = scalar @ARGV;

GetOptions(
    'bed=s'       => \$input_bed,
    'bam=s'       => \$input_bam,
    'depth=s'     => \$input_depth,
    'thresholds=s' => \$thresholds_str,
) or die "Usage: $0 --bed BED_FILE [--bam BAM_FILE | --depth DEPTH_FILE] [--thresholds THRESHOLDS]\n";

if ($num_args == 0) {
    print "Usage: $0 --bed BED_FILE [--bam BAM_FILE | --depth DEPTH_FILE] [--thresholds THRESHOLDS]\n";
    exit;
}

die "Bed file is required\n" unless $input_bed;
die "Bed file does not exist: $input_bed\n" unless -e $input_bed;
die "Either bam or depth file is required\n" unless $input_bam || $input_depth;
die "Bam file does not exist: $input_bam\n" if $input_bam && !-e $input_bam;
die "Depth file does not exist: $input_depth\n" if $input_depth && !-e $input_depth;

my @thresholds = $thresholds_str ? split /,/, $thresholds_str : (10, 50);

my $sample;
if ($input_bam) {
    my $out_dirname = dirname($input_bam);
    $sample = fileparse($input_bam, qr/\.[^.]*/);
    $input_depth = "$out_dirname/$sample.depth.txt";
    `samtools depth $input_bam > $input_depth`;
} elsif ($input_depth) {
    $sample = fileparse($input_depth, qr/\.[^.]*/);
}

my @count_headers = map { $_ . "x" } @thresholds;
my @percentage_headers = map { $_ . "x(%)" } @thresholds;
my @header = ("ID", "chrom", "start", "end", "total_bases", "region", "avg_depth", @count_headers, @percentage_headers);
my @results;

open (BED, $input_bed) or die "Can't read the bed file: $input_bed";
while (my $rec = <BED>) {
    chomp $rec;
    my ($chr, $start, $end, $info, $temp, $strand) = split(/\t/, $rec);
    $start += 1;
    my $total_bases = $end - $start + 1;
    my ($avg_depth, @counters, @percentages) = get_depth($chr, $start, $end, $total_bases, $input_depth, @thresholds);
    push @results, ["$sample", $chr, $start, $end, $total_bases, $info // "unknown", $avg_depth, @counters, @percentages];
}
close BED;

print join("\t", @header) . "\n";
foreach my $result (@results) {
    print join("\t", @$result) . "\n";
}

sub get_depth {
    my ($chr, $start, $end, $total_bases,$depth, @thresholds) = @_;
    open (DEP, $depth) or die "Can't open $depth: $!";
    my ($sum, $count) = (0, 0);
    my @counters = (0) x scalar @thresholds;
    while (my $line = <DEP>) {
        chomp $line;
        my @fields = split /\t/, $line;
        if ($fields[0] eq $chr && $fields[1] >= $start && $fields[1] <= $end) {
            my $depth_val = $fields[2];
            $sum += $depth_val;
            $count++;
            for my $i (0..$#thresholds) {
                if ($depth_val >= $thresholds[$i]) {
                    $counters[$i]++;
                }
            }
        }
    }
    close DEP;
    my $avg_depth = $count > 0 ? sprintf("%.2f", $sum / $count) : "0";
    my @percentages = map { sprintf("%.2f", ($_ / $total_bases) * 100) } @counters;
    return ($avg_depth, @counters, @percentages);
}
